#!/usr/bin/expect  -- 
####################################
# 2006.05 by echoqin
# Copyright (C) 2005 by tencent
####################################

proc Usage_Exit {myself} {
	puts ""
	puts "### USAGE:  $myself sourcefile destdir direction"
	puts ""
	puts "            sourcefile: a file or directory to be transferred"
	puts "                        需要拷贝目录时目录名后不要带 /, 否则会拷贝该目录下的所有文件"
	puts "            destdir:    the location that the sourcefile to be put into"
	puts "            direction:  pull or push."
	puts "                        pull: remote -> local"
	puts "                        push: local -> remote"
	puts "            调用本脚本之前需预先export如下变量："
	puts "                        ABSIP:         ip to login" 
	puts "                        ABSUSER:       login user" 
	puts "                        ABSPASSWD:     login password" 
	puts "                        ABSPORT:       login port" 
	puts "                        ABSBWLIMIT:    bandwidth limit, kbit/s, 0 means no limit" 
	puts "                        ABSSCPTIMEOUT: timeout of expect, s, -1 means no timeout"
	puts ""
	exit 1
}

if { [llength $argv] < 3 } {
	Usage_Exit $argv0
}

set ip "$env(ABSIP)"
set user "$env(ABSUSER)"
set passwd "$env(ABSPASSWD)"
set port "$env(ABSPORT)"
set bwlimit "$env(ABSBWLIMIT)"
set timeoutflag "$env(ABSSCPTIMEOUT)"

set sourcefile [lindex $argv 0]
set destdir [lindex $argv 1]
set direction [lindex $argv 2]

set yesnoflag 0
set timeout $timeoutflag


for {} {1} {} {

# for is only used to retry when "Interrupted system call" occured

# scp2: -p Tells scp2 to preserve file attributes and timestamps
# scp2: -r Copy directories recursively.  Does not follow symbolic links
# scp2: -Q Do not show process indicator

# rsync: -a, --archive, archive mode, equivalent to -rlptgoD
# rsync: -r, --recursive, recurse into directories
# rsync: -t, --times, preserve times
# rsync: -z, --compress, compress file data
# rsync: --progress show progress during transfer


if { $direction == "pull" } {

	if { $bwlimit > 0 } {
		spawn /usr/bin/rsync -rlptgDz --timeout=30 --bwlimit=$bwlimit -e "ssh -l$user -p$port -q" $ip:$sourcefile $destdir
	} elseif { $bwlimit == 0 } {
		spawn /usr/local/bin/scp2 -r -p -Q $user@$ip#$port:$sourcefile $destdir
	} else {
		Usage_Exit $argv0
	}

} elseif { $direction == "push" } {

	if { $bwlimit > 0 } {
		spawn /usr/bin/rsync -rlptgDz --timeout=30 --bwlimit=$bwlimit -e "ssh -l$user -p$port -q" $sourcefile $ip:$destdir
	} elseif { $bwlimit == 0 } {
		spawn /usr/local/bin/scp2 -r -p -Q $sourcefile $user@$ip#$port:$destdir
	} else {
		Usage_Exit $argv0
	}

} else {
	Usage_Exit $argv0
}

expect 	{

	"assword:" {
		send "$passwd\r" 
		break;
	}
	
	"yes/no)?" {
		set yesnoflag 1
		send "yes\r"
		break;
	}
	
	"FATAL" {
		puts "\nCONNECTERROR: $ip occur FATAL ERROR!!!\n"
		exit 2
	}
	
	timeout {
		puts "\nCONNECTERROR: $ip logon TIMEOUT!!!\n"
		exit 2
	}
	
	"No route to host" {
		puts "\nCONNECTERROR: $ip No route to host!!!\n"
		exit 2
	}
	
	"Connection Refused" {
		puts "\nCONNECTERROR: $ip Connection Refused!!!\n"
		exit 2
	}

	"Connection refused" {
		puts "\nCONNECTERROR: $ip Connection Refused!!!\n"
		exit 2
	}

	"Host key verification failed" {
		puts "\nCONNECTERROR: $ip Host key verification failed!!!\n"
		exit 2
	}
	
	"Illegal host key" {
		puts "\nCONNECTERROR: $ip Illegal host key!!!\n"
		exit 2
	}
		
	"Connection Timed Out" {
		puts "\nCONNECTERROR: $ip logon TIMEOUT!!!\n"
		exit 2
	}
	"Connection timed out" {
		puts "\nCONNECTERROR: $ip logon TIMEOUT!!!\n"
		exit 2
	}

	"Interrupted system call" {
		puts "\n$ip Interrupted system call!!!\n"
	}

	"Disconnected; connection lost" {
		puts "\n$ip connection lost!!!\n"
		exit 2
	}

	"Authentication failed" {
		puts "\n$ip Authentication failed!!!\n"
		exit 2
	}

	"Destination Unreachable" {
		puts "\n$ip Destination Unreachable!!!\n"
		exit 2
	}

	"no such file" {
		puts "\nSRCFILEERROR: $ip SCP FAILURE!!!\n"
		exit 4
	}
	"rsync error: timeout" {
		puts "\nrsync error: timeout!!!\n"
		exit 4
	}
	"rsync error:" {
		puts "\nrsync error: none timeout error!!!\n"
		exit 4
	}
	"io timeout after" {
		puts "\nrsync error: io timeout!!!\n"
		exit 4
	}
	
}

}

if { $yesnoflag == 1 } {
	expect {
		"assword:" {
			send "$passwd\r"
		}

		"yes/no)?" {
			set yesnoflag 2
			send "yes\r"
		}
	}
}

if { $yesnoflag == 2 } {
	expect {
		"assword:" {
			send "$passwd\r"
		}
	}
}

expect {
	"assword:" {
		send "$passwd\r"
		puts "\nPASSWORDERROR: $ip PASSWORD ERROR!!!\n"
		exit 3
	}
	
	"unspecified failure" {
		puts "\nDESTDIRERROR: $ip SCP FAILURE!!!\n"
		exit 4
	}

	"FATAL" {
		puts "\nCONNECTERROR: $ip occur FATAL ERROR!!!\n"
		exit 2
	}
	
	timeout {
		puts "\nCONNECTERROR: $ip logon TIMEOUT!!!\n"
		exit 2
	}
	
	"No route to host" {
		puts "\nCONNECTERROR: $ip No route to host!!!\n"
		exit 2
	}
	
	"Connection Refused" {
		puts "\nCONNECTERROR: $ip Connection Refused!!!\n"
		exit 2
	}

	"Connection refused" {
		puts "\nCONNECTERROR: $ip Connection Refused!!!\n"
		exit 2
	}

	"Host key verification failed" {
		puts "\nCONNECTERROR: $ip Host key verification failed!!!\n"
		exit 2
	}
	
	"Illegal host key" {
		puts "\nCONNECTERROR: $ip Illegal host key!!!\n"
		exit 2
	}
		
	"Connection Timed Out" {
		puts "\nCONNECTERROR: $ip logon TIMEOUT!!!\n"
		exit 2
	}

	"Interrupted system call" {
		puts "\n$ip Interrupted system call!!!\n"
	}

	"Disconnected; connection lost" {
		puts "\n$ip connection lost!!!\n"
		exit 2
	}

	"Authentication failed" {
		puts "\n$ip Authentication failed!!!\n"
		exit 2
	}

	"Destination Unreachable" {
		puts "\n$ip Destination Unreachable!!!\n"
		exit 2
	}

	"no such file" {
		puts "\nSRCFILEERROR: $ip SCP FAILURE!!!\n"
		exit 4
	}
	"rsync error: timeout" {
		puts "\nrsync error: timeout!!!\n"
		exit 4
	}
	"rsync error:" {
		puts "\nrsync error: none timeout error!!!\n"
		exit 4
	}
	"io timeout after" {
		puts "\nrsync error: io timeout!!!\n"
		exit 4
	}
	eof { 
		puts "ABS_OK_SCP: $ip\n"
		exit 0;
	}
}
